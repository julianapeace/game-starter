var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/api.ts
import axios from "axios";
var GameClient = class {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.client = null;
    this.runnerUrl = "https://game.virtuals.io";
  }
  init() {
    return __async(this, null, function* () {
      const accessToken = yield this.getAccessToken();
      this.client = axios.create({
        baseURL: this.runnerUrl,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`
        }
      });
    });
  }
  getAccessToken() {
    return __async(this, null, function* () {
      const result = yield axios.post(
        "https://api.virtuals.io/api/accesses/tokens",
        {},
        {
          headers: {
            "x-api-key": this.apiKey
          }
        }
      );
      return result.data.data.accessToken;
    });
  }
  post(url, data) {
    return __async(this, null, function* () {
      yield this.init();
      if (!this.client) {
        throw new Error("Client is not initialized");
      }
      const result = yield this.client.post("/prompts", {
        data: {
          method: "post",
          headers: {
            "Content-Type": "application/json"
          },
          route: url,
          data
        }
      });
      return result.data;
    });
  }
  createMap(workers) {
    return __async(this, null, function* () {
      const result = yield this.post("/v2/maps", {
        locations: workers.map((worker) => ({
          id: worker.id,
          name: worker.name,
          description: worker.description
        }))
      });
      return result.data;
    });
  }
  createAgent(name, goal, description) {
    return __async(this, null, function* () {
      const result = yield this.post("/v2/agents", {
        name,
        goal,
        description
      });
      return result.data;
    });
  }
  getAction(agentId, mapId, worker, gameActionResult, environment, agentState) {
    return __async(this, null, function* () {
      const payload = {
        location: worker.id,
        map_id: mapId,
        environment,
        functions: worker.functions.map((fn) => fn.toJSON()),
        agent_state: agentState,
        version: "v2"
      };
      if (gameActionResult) {
        payload.current_action = gameActionResult;
      }
      const result = yield this.post(
        `/v2/agents/${agentId}/actions`,
        payload
      );
      return result.data;
    });
  }
  setTask(agentId, task) {
    return __async(this, null, function* () {
      const result = yield this.post(
        `/v2/agents/${agentId}/tasks`,
        {
          task
        }
      );
      return result.data.submission_id;
    });
  }
  getTaskAction(agentId, submissionId, worker, gameActionResult, environment) {
    return __async(this, null, function* () {
      const payload = {
        environment,
        functions: worker.functions.map((fn) => fn.toJSON())
      };
      if (gameActionResult) {
        payload.action_result = gameActionResult;
      }
      const result = yield this.post(
        `/v2/agents/${agentId}/tasks/${submissionId}/next`,
        payload
      );
      return result.data;
    });
  }
};
var api_default = GameClient;

// src/apiV2.ts
import axios2 from "axios";
var GameClientV2 = class {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.baseUrl = "https://sdk.game.virtuals.io/v2";
    this.client = axios2.create({
      baseURL: this.baseUrl,
      headers: {
        "Content-Type": "application/json",
        "x-api-key": this.apiKey
      }
    });
  }
  createMap(workers) {
    return __async(this, null, function* () {
      const result = yield this.client.post("/maps", {
        data: {
          locations: workers.map((worker) => ({
            id: worker.id,
            name: worker.name,
            description: worker.description
          }))
        }
      });
      return result.data.data;
    });
  }
  createAgent(name, goal, description) {
    return __async(this, null, function* () {
      const result = yield this.client.post("/agents", {
        data: {
          name,
          goal,
          description
        }
      });
      return result.data.data;
    });
  }
  getAction(agentId, mapId, worker, gameActionResult, environment, agentState) {
    return __async(this, null, function* () {
      const payload = {
        location: worker.id,
        map_id: mapId,
        environment,
        functions: worker.functions.map((fn) => fn.toJSON()),
        agent_state: agentState,
        version: "v2"
      };
      if (gameActionResult) {
        payload.current_action = gameActionResult;
      }
      const result = yield this.client.post(
        `/agents/${agentId}/actions`,
        {
          data: payload
        }
      );
      return result.data.data;
    });
  }
  setTask(agentId, task) {
    return __async(this, null, function* () {
      const result = yield this.client.post(
        `/agents/${agentId}/tasks`,
        {
          data: { task }
        }
      );
      return result.data.data.submission_id;
    });
  }
  getTaskAction(agentId, submissionId, worker, gameActionResult, environment) {
    return __async(this, null, function* () {
      const payload = {
        environment,
        functions: worker.functions.map((fn) => fn.toJSON())
      };
      if (gameActionResult) {
        payload.action_result = gameActionResult;
      }
      const result = yield this.client.post(
        `/agents/${agentId}/tasks/${submissionId}/next`,
        {
          data: payload
        }
      );
      return result.data.data;
    });
  }
};
var apiV2_default = GameClientV2;

// src/agent.ts
var GameAgent = class {
  constructor(apiKey, options) {
    this.agentId = null;
    this.mapId = null;
    this.gameActionResult = null;
    this.gameClient = apiKey.startsWith("apt-") ? new apiV2_default(apiKey) : new api_default(apiKey);
    this.workerId = options.workers[0].id;
    this.name = options.name;
    this.goal = options.goal;
    this.description = options.description;
    this.workers = options.workers;
    this.getAgentState = options.getAgentState;
  }
  log(msg) {
    console.log(`[${this.name}] ${msg}`);
  }
  init() {
    return __async(this, null, function* () {
      const map = yield this.gameClient.createMap(this.workers);
      const agent = yield this.gameClient.createAgent(
        this.name,
        this.goal,
        this.description
      );
      this.workers.forEach((worker) => {
        worker.setAgentId(agent.id);
        worker.setLogger(this.log.bind(this));
        worker.setGameClient(this.gameClient);
      });
      this.mapId = map.id;
      this.agentId = agent.id;
    });
  }
  setLogger(logger) {
    this.log = (msg) => logger(this, msg);
  }
  getWorkerById(workerId) {
    const worker = this.workers.find((worker2) => worker2.id === workerId);
    if (!worker) {
      throw new Error("Worker not found");
    }
    return worker;
  }
  step(options) {
    return __async(this, null, function* () {
      if (!this.agentId || !this.mapId) {
        throw new Error("Agent not initialized");
      }
      const { verbose } = options || {};
      const worker = this.workers.find((worker2) => worker2.id === this.workerId);
      if (!worker) {
        throw new Error("Worker not found");
      }
      const environment = worker.getEnvironment ? yield worker.getEnvironment() : {};
      const agentState = this.getAgentState ? yield this.getAgentState() : {};
      if (verbose) {
        this.log(`Environment State: ${JSON.stringify(environment)}`);
        this.log(`Agent State: ${JSON.stringify(agentState)}`);
      }
      const action = yield this.gameClient.getAction(
        this.agentId,
        this.mapId,
        worker,
        this.gameActionResult,
        environment,
        agentState
      );
      (options == null ? void 0 : options.verbose) && this.log(`Action State: ${JSON.stringify(action.agent_state || {})}.`);
      this.gameActionResult = null;
      switch (action.action_type) {
        case "call_function" /* CallFunction */:
        case "continue_function" /* ContinueFunction */:
          verbose && this.log(
            `Performing function ${action.action_args.fn_name} with args ${JSON.stringify(action.action_args.args)}.`
          );
          const fn = worker.functions.find(
            (fn2) => fn2.name === action.action_args.fn_name
          );
          if (!fn) {
            throw new Error("Function not found");
          }
          const result = yield fn.execute(
            action.action_args.args,
            (msg) => this.log(msg)
          );
          verbose && this.log(`Function status [${result.status}]: ${result.feedback}.`);
          this.gameActionResult = result.toJSON(action.action_args.fn_id);
          break;
        case "go_to" /* GoTo */:
          this.workerId = action.action_args.location_id;
          verbose && this.log(`Going to ${action.action_args.location_id}.`);
          break;
        case "wait" /* Wait */:
          verbose && this.log(`No actions to perform.`);
          return action.action_type;
        default:
          return "unknown" /* Unknown */;
      }
      return action.action_type;
    });
  }
  run(heartbeatSeconds, options) {
    return __async(this, null, function* () {
      if (!this.agentId || !this.mapId) {
        throw new Error("Agent not initialized");
      }
      while (true) {
        const action = yield this.step({
          verbose: (options == null ? void 0 : options.verbose) || false
        });
        if (action === "wait" /* Wait */ || action === "unknown" /* Unknown */) {
          break;
        }
        yield new Promise(
          (resolve) => setTimeout(resolve, heartbeatSeconds * 1e3)
        );
      }
    });
  }
};
var agent_default = GameAgent;

// src/worker.ts
var GameWorker = class {
  constructor(options) {
    this.agentId = null;
    this.logger = null;
    this.gameClient = null;
    this.gameActionResult = null;
    this.id = options.id;
    this.name = options.name;
    this.description = options.description;
    this.functions = options.functions;
    this.getEnvironment = options.getEnvironment;
  }
  setAgentId(agentId) {
    this.agentId = agentId;
  }
  setLogger(logger) {
    this.logger = logger;
  }
  setGameClient(gameClient) {
    this.gameClient = gameClient;
  }
  step(submissionId, options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      if (!this.agentId) {
        throw new Error("Agent not initialized");
      }
      if (!this.gameClient) {
        throw new Error("Game client not initialized");
      }
      const environment = this.getEnvironment ? yield this.getEnvironment() : {};
      if (options == null ? void 0 : options.verbose) {
        (_a = this.logger) == null ? void 0 : _a.call(this, `Environment State: ${JSON.stringify(environment)}`);
      }
      const action = yield this.gameClient.getTaskAction(
        this.agentId,
        submissionId,
        this,
        this.gameActionResult,
        environment
      );
      this.gameActionResult = null;
      if (!["call_function" /* CallFunction */, "continue_function" /* ContinueFunction */].includes(
        action.action_type
      )) {
        return false;
      }
      const fn = this.functions.find(
        (fn2) => fn2.name === action.action_args.fn_name
      );
      if (!fn) {
        throw new Error("Function not found");
      }
      (options == null ? void 0 : options.verbose) && ((_b = this.logger) == null ? void 0 : _b.call(
        this,
        `Performing function ${action.action_args.fn_name} with args ${JSON.stringify(action.action_args.args)}.`
      ));
      const args = action.action_args.args;
      const result = yield fn.execute(args, (msg) => {
        var _a2;
        return (_a2 = this.logger) == null ? void 0 : _a2.call(this, msg);
      });
      (options == null ? void 0 : options.verbose) && ((_c = this.logger) == null ? void 0 : _c.call(this, `Function status: ${result.status} - ${result.feedback}.`));
      this.gameActionResult = result.toJSON(action.action_args.fn_id);
      return true;
    });
  }
  runTask(task, options) {
    return __async(this, null, function* () {
      if (!this.agentId) {
        throw new Error("Agent not initialized");
      }
      if (!this.gameClient) {
        throw new Error("Game client not initialized");
      }
      const submissionId = yield this.gameClient.setTask(this.agentId, task);
      while (true) {
        const result = yield this.step(submissionId, options);
        if (!result) {
          break;
        }
      }
    });
  }
};
var worker_default = GameWorker;

// src/function.ts
var ExecutableGameFunctionStatus = /* @__PURE__ */ ((ExecutableGameFunctionStatus2) => {
  ExecutableGameFunctionStatus2["Done"] = "done";
  ExecutableGameFunctionStatus2["Failed"] = "failed";
  return ExecutableGameFunctionStatus2;
})(ExecutableGameFunctionStatus || {});
var ExecutableGameFunctionResponse = class {
  constructor(status, feedback) {
    this.status = status;
    this.feedback = feedback;
  }
  toJSON(id) {
    return {
      action_id: id,
      action_status: this.status,
      feedback_message: this.feedback
    };
  }
};
var GameFunction = class {
  constructor(options) {
    this.name = options.name;
    this.description = options.description;
    this.args = options.args;
    this.executable = options.executable;
    this.hint = options.hint;
  }
  toJSON() {
    return {
      fn_name: this.name,
      fn_description: this.description,
      args: this.args,
      hint: this.hint
    };
  }
  execute(args, logger) {
    return __async(this, null, function* () {
      const argValues = Object.keys(args).reduce(
        (acc, key) => {
          var _a;
          acc[key] = (_a = args[key]) == null ? void 0 : _a.value;
          return acc;
        },
        {}
      );
      return yield this.executable(argValues, logger);
    });
  }
};
var function_default = GameFunction;
export {
  ExecutableGameFunctionResponse,
  ExecutableGameFunctionStatus,
  agent_default as GameAgent,
  function_default as GameFunction,
  worker_default as GameWorker
};

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const game_1 = require("@virtuals-protocol/game");
const generateImageFunction = new game_1.GameFunction({
    name: "generate_image",
    description: "Generate an image",
    args: [
        {
            name: "image_description",
            description: "The description of the image to generate",
        },
    ],
    executable: (args, logger) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            // TODO: Implement generate image with url
            logger(`Generating image with description: ${args.image_description}`);
            return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, "Image generated with URL: https://example.com/image.png");
        }
        catch (e) {
            return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, "Failed to generate image");
        }
    }),
});
const replyMessageFunction = new game_1.GameFunction({
    name: "reply_message",
    description: "Reply to a message",
    args: [
        { name: "message", description: "The message to reply" },
        {
            name: "media_url",
            description: "The media url to attach to the message",
            optional: true,
        },
    ],
    executable: (args, logger) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            // TODO: Implement replying to message with image
            if (args.media_url) {
                logger(`Reply with media: ${args.media_url}`);
            }
            // TODO: Implement replying to message
            logger(`Replying to message: ${args.message}`);
            return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, `Replied with message: ${args.message}`);
        }
        catch (e) {
            return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, "Failed to reply to message");
        }
    }),
});
const telegramWorker = new game_1.GameWorker({
    id: "telegram",
    name: "telegram",
    description: "Telegram worker",
    functions: [generateImageFunction, replyMessageFunction],
});
const agent = new game_1.GameAgent("API_KEY", {
    name: "Telegram Agent",
    goal: "Interact with Telegram",
    description: "Telegram agent",
    workers: [telegramWorker],
});
(() => __awaiter(void 0, void 0, void 0, function* () {
    // define custom logger
    agent.setLogger((agent, msg) => {
        console.log(`-----[${agent.name}]-----`);
        console.log(msg);
        console.log("\n");
    });
    yield agent.init();
    const agentTgWorker = agent.getWorkerById(telegramWorker.id);
    const task = "Gotten a message from user. Message content: hey! i will need help with my project, i need an image of a cat hugging AI. Can you help me with that? Give me something that cool and cute!";
    yield agentTgWorker.runTask(task, {
        verbose: true, // Optional: Set to true to log each step
    });
}))();

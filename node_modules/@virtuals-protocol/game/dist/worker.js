"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const GameClient_1 = require("./interface/GameClient");
class GameWorker {
    constructor(options) {
        this.agentId = null;
        this.logger = null;
        this.gameClient = null;
        this.gameActionResult = null;
        this.id = options.id;
        this.name = options.name;
        this.description = options.description;
        this.functions = options.functions;
        this.getEnvironment = options.getEnvironment;
    }
    setAgentId(agentId) {
        this.agentId = agentId;
    }
    setLogger(logger) {
        this.logger = logger;
    }
    setGameClient(gameClient) {
        this.gameClient = gameClient;
    }
    step(submissionId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            if (!this.agentId) {
                throw new Error("Agent not initialized");
            }
            if (!this.gameClient) {
                throw new Error("Game client not initialized");
            }
            const environment = this.getEnvironment ? yield this.getEnvironment() : {};
            if (options === null || options === void 0 ? void 0 : options.verbose) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.call(this, `Environment State: ${JSON.stringify(environment)}`);
            }
            const action = yield this.gameClient.getTaskAction(this.agentId, submissionId, this, this.gameActionResult, environment);
            this.gameActionResult = null;
            if (![GameClient_1.ActionType.CallFunction, GameClient_1.ActionType.ContinueFunction].includes(action.action_type)) {
                return false;
            }
            const fn = this.functions.find((fn) => fn.name === action.action_args.fn_name);
            if (!fn) {
                throw new Error("Function not found");
            }
            (options === null || options === void 0 ? void 0 : options.verbose) &&
                ((_b = this.logger) === null || _b === void 0 ? void 0 : _b.call(this, `Performing function ${action.action_args.fn_name} with args ${JSON.stringify(action.action_args.args)}.`));
            const args = action.action_args.args;
            const result = yield fn.execute(args, (msg) => { var _a; return (_a = this.logger) === null || _a === void 0 ? void 0 : _a.call(this, msg); });
            (options === null || options === void 0 ? void 0 : options.verbose) &&
                ((_c = this.logger) === null || _c === void 0 ? void 0 : _c.call(this, `Function status: ${result.status} - ${result.feedback}.`));
            this.gameActionResult = result.toJSON(action.action_args.fn_id);
            return true;
        });
    }
    runTask(task, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.agentId) {
                throw new Error("Agent not initialized");
            }
            if (!this.gameClient) {
                throw new Error("Game client not initialized");
            }
            const submissionId = yield this.gameClient.setTask(this.agentId, task);
            while (true) {
                const result = yield this.step(submissionId, options);
                if (!result) {
                    break;
                }
            }
        });
    }
}
exports.default = GameWorker;

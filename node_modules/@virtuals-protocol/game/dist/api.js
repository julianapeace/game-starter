"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
class GameClient {
    constructor(apiKey) {
        this.apiKey = apiKey;
        this.client = null;
        this.runnerUrl = "https://game.virtuals.io";
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const accessToken = yield this.getAccessToken();
            this.client = axios_1.default.create({
                baseURL: this.runnerUrl,
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${accessToken}`,
                },
            });
        });
    }
    getAccessToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield axios_1.default.post("https://api.virtuals.io/api/accesses/tokens", {}, {
                headers: {
                    "x-api-key": this.apiKey,
                },
            });
            return result.data.data.accessToken;
        });
    }
    post(url, data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.init();
            if (!this.client) {
                throw new Error("Client is not initialized");
            }
            const result = yield this.client.post("/prompts", {
                data: {
                    method: "post",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    route: url,
                    data,
                },
            });
            return result.data;
        });
    }
    createMap(workers) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.post("/v2/maps", {
                locations: workers.map((worker) => ({
                    id: worker.id,
                    name: worker.name,
                    description: worker.description,
                })),
            });
            return result.data;
        });
    }
    createAgent(name, goal, description) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.post("/v2/agents", {
                name,
                goal,
                description,
            });
            return result.data;
        });
    }
    getAction(agentId, mapId, worker, gameActionResult, environment, agentState) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                location: worker.id,
                map_id: mapId,
                environment: environment,
                functions: worker.functions.map((fn) => fn.toJSON()),
                agent_state: agentState,
                version: "v2",
            };
            if (gameActionResult) {
                payload.current_action = gameActionResult;
            }
            const result = yield this.post(`/v2/agents/${agentId}/actions`, payload);
            return result.data;
        });
    }
    setTask(agentId, task) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.post(`/v2/agents/${agentId}/tasks`, {
                task: task,
            });
            return result.data.submission_id;
        });
    }
    getTaskAction(agentId, submissionId, worker, gameActionResult, environment) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                environment: environment,
                functions: worker.functions.map((fn) => fn.toJSON()),
            };
            if (gameActionResult) {
                payload.action_result = gameActionResult;
            }
            const result = yield this.post(`/v2/agents/${agentId}/tasks/${submissionId}/next`, payload);
            return result.data;
        });
    }
}
exports.default = GameClient;

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const apiV2_1 = __importDefault(require("./apiV2"));
const GameClient_1 = require("./interface/GameClient");
class GameAgent {
    log(msg) {
        console.log(`[${this.name}] ${msg}`);
    }
    constructor(apiKey, options) {
        this.agentId = null;
        this.mapId = null;
        this.gameActionResult = null;
        // this.gameClient = new GameClient(apiKey);
        this.gameClient = new apiV2_1.default(apiKey);
        this.workerId = options.workers[0].id;
        this.name = options.name;
        this.goal = options.goal;
        this.description = options.description;
        this.workers = options.workers;
        this.getAgentState = options.getAgentState;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const map = yield this.gameClient.createMap(this.workers);
            const agent = yield this.gameClient.createAgent(this.name, this.goal, this.description);
            this.workers.forEach((worker) => {
                worker.setAgentId(agent.id);
                worker.setLogger(this.log.bind(this));
                worker.setGameClient(this.gameClient);
            });
            this.mapId = map.id;
            this.agentId = agent.id;
        });
    }
    setLogger(logger) {
        this.log = (msg) => logger(this, msg);
    }
    getWorkerById(workerId) {
        const worker = this.workers.find((worker) => worker.id === workerId);
        if (!worker) {
            throw new Error("Worker not found");
        }
        return worker;
    }
    step(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.agentId || !this.mapId) {
                throw new Error("Agent not initialized");
            }
            const { verbose } = options || {};
            const worker = this.workers.find((worker) => worker.id === this.workerId);
            if (!worker) {
                throw new Error("Worker not found");
            }
            const environment = worker.getEnvironment
                ? yield worker.getEnvironment()
                : {};
            const agentState = this.getAgentState ? yield this.getAgentState() : {};
            if (verbose) {
                this.log(`Environment State: ${JSON.stringify(environment)}`);
                this.log(`Agent State: ${JSON.stringify(agentState)}`);
            }
            const action = yield this.gameClient.getAction(this.agentId, this.mapId, worker, this.gameActionResult, environment, agentState);
            (options === null || options === void 0 ? void 0 : options.verbose) &&
                this.log(`Action State: ${JSON.stringify(action.agent_state || {})}.`);
            this.gameActionResult = null;
            switch (action.action_type) {
                case GameClient_1.ActionType.CallFunction:
                case GameClient_1.ActionType.ContinueFunction:
                    verbose &&
                        this.log(`Performing function ${action.action_args.fn_name} with args ${JSON.stringify(action.action_args.args)}.`);
                    const fn = worker.functions.find((fn) => fn.name === action.action_args.fn_name);
                    if (!fn) {
                        throw new Error("Function not found");
                    }
                    const result = yield fn.execute(action.action_args.args, (msg) => this.log(msg));
                    verbose &&
                        this.log(`Function status [${result.status}]: ${result.feedback}.`);
                    this.gameActionResult = result.toJSON(action.action_args.fn_id);
                    break;
                case GameClient_1.ActionType.GoTo:
                    this.workerId = action.action_args.location_id;
                    verbose && this.log(`Going to ${action.action_args.location_id}.`);
                    break;
                case GameClient_1.ActionType.Wait:
                    verbose && this.log(`No actions to perform.`);
                    return action.action_type;
                default:
                    return GameClient_1.ActionType.Unknown;
            }
            return action.action_type;
        });
    }
    run(heartbeatSeconds, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.agentId || !this.mapId) {
                throw new Error("Agent not initialized");
            }
            while (true) {
                const action = yield this.step({
                    verbose: (options === null || options === void 0 ? void 0 : options.verbose) || false,
                });
                if (action === GameClient_1.ActionType.Wait || action === GameClient_1.ActionType.Unknown) {
                    break;
                }
                yield new Promise((resolve) => setTimeout(resolve, heartbeatSeconds * 1000));
            }
        });
    }
}
exports.default = GameAgent;

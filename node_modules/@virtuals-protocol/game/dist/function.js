"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecutableGameFunctionResponse = exports.ExecutableGameFunctionStatus = void 0;
var ExecutableGameFunctionStatus;
(function (ExecutableGameFunctionStatus) {
    ExecutableGameFunctionStatus["Done"] = "done";
    ExecutableGameFunctionStatus["Failed"] = "failed";
})(ExecutableGameFunctionStatus || (exports.ExecutableGameFunctionStatus = ExecutableGameFunctionStatus = {}));
class ExecutableGameFunctionResponse {
    constructor(status, feedback) {
        this.status = status;
        this.feedback = feedback;
    }
    toJSON(id) {
        return {
            action_id: id,
            action_status: this.status,
            feedback_message: this.feedback,
        };
    }
}
exports.ExecutableGameFunctionResponse = ExecutableGameFunctionResponse;
class GameFunction {
    constructor(options) {
        this.name = options.name;
        this.description = options.description;
        this.args = options.args;
        this.executable = options.executable;
        this.hint = options.hint;
    }
    toJSON() {
        return {
            fn_name: this.name,
            fn_description: this.description,
            args: this.args,
            hint: this.hint,
        };
    }
    execute(args, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            const argValues = Object.keys(args).reduce((acc, key) => {
                var _a;
                acc[key] = (_a = args[key]) === null || _a === void 0 ? void 0 : _a.value;
                return acc;
            }, {});
            return yield this.executable(argValues, logger);
        });
    }
}
exports.default = GameFunction;
